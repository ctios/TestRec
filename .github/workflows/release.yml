name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build_wheel:
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:12.1.0-devel-ubuntu20.04
    strategy:
      matrix:
        python-version: [3.10]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends python3-dev gcc g++

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch==2.0.1+cu118 torchvision==0.15.2+cu118 --extra-index-url https://download.pytorch.org/whl/cu118
          pip install setuptools wheel pybind11

      - name: Build wheel
        run: |
          python setup.py bdist_wheel

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v3
        with:
          name: wheel-cuda12-python310
          path: dist/*.whl

      - name: Extract release notes from CHANGELOG
        id: extract_changelog
        run: |
          # Extract the first section from CHANGELOG.md
          awk '/^# /{if (found==1) exit; found=1; next} found && NF' CHANGELOG.md > RELEASE_NOTES.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.extract_changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*.whl
          asset_name: torch_ops-${{ github.ref_name }}-cp310-cp310-linux_x86_64.whl
          asset_content_type: application/zip